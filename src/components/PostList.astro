---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
export interface Props {
    predicate?: (x: CollectionEntry<'posts'>) => boolean
}
const allPosts = 
    (await getCollection('posts', x => {
        return !x.data.archived && (Astro.props.predicate?.(x) ?? true)
    }))
    .sort( (a,b) => b.data.created.getTime() - a.data.created.getTime()  )


---
<style>
    

.card.from-cohost {
  --hue: 333;
  background-color: hsl(333, 56%, 26%);
  box-shadow: 83254f;
  --card-highlight-shadow: -10px 12px 15px -14px hsl(var(--hue), 86.1%, 82%) inset;
  color: white;
  --link-color: white;
}
.card {
    display: grid;
    gap: 1em;
    padding: 2em;
    transition: transform 0.5s, background-color 1s;
    background-color: var(--card-background-color);
    box-shadow: var(--card-highlight-shadow);
    border-radius: 1.5em;
}

.card:has(.subtitle) {
    gap: 1em;
}

.card .subtitle {
    opacity: 0.5;
    font-style: italic;
    font-size: 0.8em;
}

.card.featured:hover {
    transition: transform 0.1s, background-color 0.2s;
}
.card:hover {
    backface-visibility: hidden;
    transform: scale(1.05);
    
    transition: transform 0.1s, background-color 1s;
}
.card:not(.from-cohost):hover {
    background-color: var(--card-background-color-featured, rgba(0,0,0,0.05));
} 

.card {
    transform: scale(1);
    transition: transform 0.5s, background-color 1s;
}

.card:hover {
    transform: scale(1.05);
    transition: transform 0.1s, background-color 0.2s;
}

.card.featured {
    color: var(--card-color-featured);
    background-color: var(--card-background-color-featured);
}

.tags {
    justify-self: start;
    display: flex;
    list-style: none;
    padding: 0em;
    margin: 0em;
    gap: 0.5em 0.5em;
    flex-wrap: wrap;
    align-items: center;
    transition: opacity 1s;

    &:hover li:not(li:hover) {
        opacity: 0.2;
    }
    
    li {
        border: solid 1px currentColor;
        padding: 0.5em;
        border-radius: 0.5em;
        font-size: 0.8em;
        opacity: 0.7;
        transition: transform 0.1s, opacity 0.5s;
    }

    li:hover {
        backface-visibility: hidden;
        transform: scale(1.1);
        opacity: 1;
    }

}


.posts-list {
    display: grid;
    gap: 1em;
    @media (min-width: 23em) {
        & {
            display: grid;
            gap: 1em 5em;
            justify-content: center;
            grid-template-columns: minmax(0em, 60em);
            gap: 4em;
        }
    }

    & * {
        margin: 0em;
        box-sizing: border-box;
    }


    & .list {
        display: grid;
    }

    @media ( max-width: 30em ) {
        & {
            gap: 3em 1em;
        }
        & .list {
            display: grid;
            gap: 1em;
        }
    
        & .list > ul {
            display: grid;
            gap: 1em 3em;
            grid-template-columns: 1fr;
            list-style: none;
            margin: 0em;
            padding: 0em;
        }
    }
    @media ( min-width: 30em ) {

        & .list > ul {
            display: grid;
            gap: 1em 3em;
            grid-template-columns: repeat(auto-fill, minmax(15em, 1fr));
            list-style: none;
            margin: 0em;
            padding: 0em;
        }
    }

    @media (max-width: 80em) {
        & .list {
            gap: 1em;
        }
    }

    @media (min-width: 80em) {
        & .list {
            display: grid;
            --gutter: 10em;
            grid-template-columns: var(--gutter) 1fr; 
            margin-left: calc( var(--gutter) * -1 );
        }
    }

}

.rss {
    
    display: grid;
    h4 {
        margin: 0em;
    }

    @media (max-width: 80em) {
        & {
            gap: 1em;
        }
    }

    @media (min-width: 80em) {
        & {
            display: grid;
            --gutter: 10em;
            grid-template-columns: var(--gutter) 1fr; 
            margin-left: calc( var(--gutter) * -1 );
        }
    }

    & ul {
        padding: 0em;
        list-style: none;
    }

    & p {
        margin: 0em;
    }

    & .list {
        display: grid;
    }

    
  

    @media ( max-width: 30em ) {
        & {
            gap: 3em 1em;
        }
        & .list {
            display: grid;
            gap: 1em;
        }

        & .list {
            display: grid;
            gap: 1em 3em;
            grid-template-columns: 1fr;
            list-style: none;
            margin: 0em;
            padding: 0em;
        }
    }
    @media ( min-width: 30em ) {

        & .list {
            display: grid;
            gap: 1em 3em;
            grid-template-columns: repeat(auto-fill, minmax(15em, 1fr));
            list-style: none;
            margin: 0em;
            padding: 0em;
        }
    }

    & .date {
        font-size: 0.8em;
    }
}
</style>

<div class="posts-list">
    <div class="list recent">
        <h4>Recent articles</h4>
        <ul>
            {allPosts.slice(0,4).map( x => 
                
                    <li class:list={['card', x.data.featured && 'featured' ]}>
                        <a href={`/posts/${x.slug}`}><p class="title">{x.data.title}</p></a>
                        {x.data.subtitle && <p class="subtitle">{x.data.subtitle}</p>}
                        <p>
                            <i>{new Intl.DateTimeFormat('en-US', { dateStyle: 'long' }).format(x.data.created)}</i>
                            <ul class="tags">{x.data.tags?.slice(0,4).map( x =>  <a href={`/tags/${x}`}><li>{x}</li></a>)}</ul>
                        </p>
                    </li>
                
            )}
        </ul>
    </div>
    {
        allPosts.length > 4 && <div class="list rest">
            <h4>Previous articles</h4>
            <ul>
                {allPosts.slice(4).map( x => 
                    
                    <li class:list={['card', x.data.featured && 'featured', x.data.tags?.includes('from:cohost') && 'from-cohost']}>
                        <a href={`/posts/${x.slug}`}><p class="title">{x.data.title}</p></a>
                        {x.data.subtitle && <p class="subtitle">{x.data.subtitle}</p>}
                        <p>
                            <i>{new Intl.DateTimeFormat('en-US', { dateStyle: 'long' }).format(x.data.created)}</i>
                            <ul class="tags">{x.data.tags?.slice(0,4).map( x =>  <a href={`/tags/${x}`}><li>{x}</li></a>)}</ul>
                        </p>
                    </li>
                    
                )}
            </ul>
        </div>
    }
</div>
<div class="rss">
    <h4>Feeds</h4>
    <ul class="rss-posts list">
        <a href="/feed/atom">
            <li class="card">Atom</li>
        </a>
        <a href="/feed/json">
            <li class="card">JSON</li>
        </a>
        <a href="/feed/rss">
            <li class="card">RSS</li>
        </a>
    </ul>
</div>